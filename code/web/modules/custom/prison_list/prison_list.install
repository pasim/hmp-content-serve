<?php
use Drupal\Component\Serialization\Yaml;
/**
 * implements hook_install()
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function prison_list_install(){


  \Drupal::messenger()->addMessage("prison_list");
  \Drupal::logger('prison_list')->notice("Inslalling staff for prisons");

  $path = drupal_get_path('module', 'prison_list');

  foreach (scandir($path.'/config/install', 1) as $file){
    if ($file != "." && $file != "..") {
      Drupal::messenger()->addMessage("File: ".$file);
      $config_id = substr($file, 0, -4);
      $raw_data = file_get_contents($path.'/config/install/'.$file);
      Drupal::configFactory()->reset($config_id);
      Drupal::configFactory()->getEditable($config_id)->delete();

      \Drupal::configFactory()->getEditable($config_id)
        ->setData(\Drupal\Component\Serialization\Yaml::decode($raw_data))
        ->save();
    }
  }

  $terms = [
    'HMP Berwyn',
    'HMP Feltham',
    'HMP Wayland',
  ];

  foreach ($terms as $term){

    $new_term = \Drupal\taxonomy\Entity\Term::create([
      'vid' => 'prisons',
      'name' => $term,
    ]);

    $new_term->enforceIsNew();
    try {
      $new_term->save();
    } catch (\Drupal\Core\Entity\EntityStorageException $e) {
      \Drupal::messenger()->addWarning("Installation failed for ".$term);
    }

  }

}

/**
 * implements hook_uninstall()
 */
function prison_list_uninstall(){

  //\Drupal::messenger()->addError("migration failed");
  $path = drupal_get_path('module', 'prison_list');

  foreach (scandir($path.'/config/install', 1) as $file){
    if ($file != "." && $file != "..") {
      $config_id = substr($file, 0, -4);
      Drupal::messenger()->addMessage("File: ".$file);
      \Drupal::logger('my_module')->notice("Working on file: ".$file);
// Logs an error
      $raw_data = file_get_contents($path.'/config/install/'.$file);
      Drupal::configFactory()->reset($config_id);
      Drupal::configFactory()->getEditable($config_id)->delete();

//      \Drupal::configFactory()->getEditable($config_id)
//        ->setData(Yaml::decode($raw_data))
//        ->save();
    }
  }

}
